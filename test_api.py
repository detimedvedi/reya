"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API Reya –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–∏–ø–æ—Ç–µ–∑—ã –æ –ª–∏–º–∏—Ç–µ –¥–∞–Ω–Ω—ã—Ö
"""
import requests
import json

def test_api_structure():
    """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ API"""
    print("=" * 60)
    print("–¢–ï–°–¢ 1: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API")
    print("=" * 60)
    
    url = "https://api.reya.xyz/api/incentives/leaderBoard/total"
    
    try:
        response = requests.get(url, timeout=10)
        print(f"‚úÖ Status Code: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            
            # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            print(f"\nüìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:")
            print(f"   –ö–ª—é—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è: {list(data.keys())}")
            
            if 'data' in data:
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ 'data': {len(data['data'])}")
                if data['data']:
                    print(f"   –ü–µ—Ä–≤—ã–π rank: {data['data'][0].get('rank', 'N/A')}")
                    print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–π rank: {data['data'][-1].get('rank', 'N/A')}")
                    print(f"   –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏: {json.dumps(data['data'][0], indent=2)}")
            
            if 'meta' in data:
                print(f"\nüîç –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏:")
                print(f"   {json.dumps(data['meta'], indent=2)}")
            
            if 'leaderboard' in data:
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ 'leaderboard': {len(data['leaderboard'])}")
            
            return data
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text[:200]}")
            return None
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return None


def test_pagination():
    """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ 2: –ü–∞–≥–∏–Ω–∞—Ü–∏—è API")
    print("=" * 60)
    
    url = "https://api.reya.xyz/api/incentives/leaderBoard/total"
    
    # –¢–µ—Å—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º after
    test_params = [
        {},
        {'after': 100},
        {'after': 1000},
        {'after': 5000},
        {'limit': 100},
        {'limit': 1000},
    ]
    
    for params in test_params:
        try:
            print(f"\nüì° –ó–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")
            response = requests.get(url, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                
                if 'data' in data:
                    count = len(data['data'])
                    first_rank = data['data'][0].get('rank', 'N/A') if data['data'] else 'N/A'
                    last_rank = data['data'][-1].get('rank', 'N/A') if data['data'] else 'N/A'
                    print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {count}")
                    print(f"   üìä –î–∏–∞–ø–∞–∑–æ–Ω ranks: {first_rank} - {last_rank}")
                    
                    if 'meta' in data and 'after' in data['meta']:
                        print(f"   ‚û°Ô∏è  –°–ª–µ–¥—É—é—â–∏–π 'after': {data['meta']['after']}")
                elif 'leaderboard' in data:
                    count = len(data['leaderboard'])
                    first_rank = data['leaderboard'][0].get('rank', 'N/A') if data['leaderboard'] else 'N/A'
                    last_rank = data['leaderboard'][-1].get('rank', 'N/A') if data['leaderboard'] else 'N/A'
                    print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {count}")
                    print(f"   üìä –î–∏–∞–ø–∞–∑–æ–Ω ranks: {first_rank} - {last_rank}")
            else:
                print(f"   ‚ùå Status: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")


def test_different_endpoints():
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ 3: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã")
    print("=" * 60)
    
    endpoints = [
        "https://api.reya.xyz/api/incentives/leaderBoard/total",
        "https://api.reya.xyz/api/incentives/leaderboard",
        "https://api.reya.xyz/api/incentives/leaderBoard",
        "https://api.reya.xyz/api/leaderboard",
    ]
    
    for endpoint in endpoints:
        try:
            print(f"\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {endpoint}")
            response = requests.get(endpoint, timeout=10)
            print(f"   Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                keys = list(data.keys())
                print(f"   ‚úÖ –ö–ª—é—á–∏: {keys}")
                
                # –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π
                if 'data' in data:
                    print(f"   üìä –ó–∞–ø–∏—Å–µ–π –≤ 'data': {len(data['data'])}")
                if 'leaderboard' in data:
                    print(f"   üìä –ó–∞–ø–∏—Å–µ–π –≤ 'leaderboard': {len(data['leaderboard'])}")
                    
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")


def test_query_parameters():
    """–¢–µ—Å—Ç 4: –†–∞–∑–ª–∏—á–Ω—ã–µ query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ 4: Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    print("=" * 60)
    
    url = "https://api.reya.xyz/api/incentives/leaderBoard/total"
    
    param_combinations = [
        {'page': 1},
        {'page': 2},
        {'offset': 0, 'limit': 100},
        {'offset': 100, 'limit': 100},
        {'skip': 0, 'take': 100},
        {'cursor': 0},
        {'from': 0, 'to': 100},
    ]
    
    for params in param_combinations:
        try:
            print(f"\nüì° –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
            response = requests.get(url, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if 'data' in data:
                    count = len(data['data'])
                    print(f"   ‚úÖ –ó–∞–ø–∏—Å–µ–π: {count}")
                elif 'leaderboard' in data:
                    count = len(data['leaderboard'])
                    print(f"   ‚úÖ –ó–∞–ø–∏—Å–µ–π: {count}")
            else:
                print(f"   ‚ö†Ô∏è  Status: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")


def analyze_current_data():
    """–¢–µ—Å—Ç 5: –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ 5: –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ JSON —Ñ–∞–π–ª–∞")
    print("=" * 60)
    
    try:
        with open('reya_complete_leaderboard.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–∞:")
        print(f"   Timestamp: {data.get('timestamp', 'N/A')}")
        print(f"   Total Entries: {data.get('totalEntries', 'N/A')}")
        print(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(data.get('leaderboard', []))}")
        
        if 'leaderboard' in data and data['leaderboard']:
            leaderboard = data['leaderboard']
            
            # –ê–Ω–∞–ª–∏–∑ ranks
            ranks = [entry.get('rank', 0) for entry in leaderboard]
            print(f"\nüî¢ –ê–Ω–∞–ª–∏–∑ ranks:")
            print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π rank: {min(ranks)}")
            print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π rank: {max(ranks)}")
            print(f"   –ü—Ä–æ–ø—É—Å–∫–∏ –≤ ranks: {max(ranks) - min(ranks) + 1 - len(ranks)}")
            
            # –ê–Ω–∞–ª–∏–∑ points
            points = [entry.get('totalPoints', 0) for entry in leaderboard]
            print(f"\nüí∞ –ê–Ω–∞–ª–∏–∑ points:")
            print(f"   –ú–∞–∫—Å–∏–º—É–º: {max(points):.2f}")
            print(f"   –ú–∏–Ω–∏–º—É–º: {min(points):.2f}")
            print(f"   –°—Ä–µ–¥–Ω–∏–π: {sum(points)/len(points):.2f}")
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º
            ranges = {
                '0-1': 0, '1-5': 0, '5-10': 0, '10-20': 0, '20-50': 0,
                '50-100': 0, '100-200': 0, '200-500': 0, '500-1000': 0,
                '1000-2000': 0, '2000-5000': 0, '5000+': 0
            }
            
            for p in points:
                if p < 1: ranges['0-1'] += 1
                elif p < 5: ranges['1-5'] += 1
                elif p < 10: ranges['5-10'] += 1
                elif p < 20: ranges['10-20'] += 1
                elif p < 50: ranges['20-50'] += 1
                elif p < 100: ranges['50-100'] += 1
                elif p < 200: ranges['100-200'] += 1
                elif p < 500: ranges['200-500'] += 1
                elif p < 1000: ranges['500-1000'] += 1
                elif p < 2000: ranges['1000-2000'] += 1
                elif p < 5000: ranges['2000-5000'] += 1
                else: ranges['5000+'] += 1
            
            print(f"\nüìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º:")
            for range_name, count in ranges.items():
                if count > 0:
                    print(f"   {range_name:12} : {count:5} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª reya_complete_leaderboard.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    print("\nüî¨ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API REYA\n")
    
    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    api_data = test_api_structure()
    test_pagination()
    test_different_endpoints()
    test_query_parameters()
    analyze_current_data()
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("=" * 60)
