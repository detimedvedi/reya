"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –ø–æ–ª–Ω–æ–≥–æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ Reya —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""
import requests
import json
import time
from datetime import datetime

def fetch_complete_leaderboard_v2():
    """
    Fetch complete Reya leaderboard with improved pagination handling
    """
    
    base_url = "https://api.reya.xyz/api/incentives/leaderBoard/total"
    all_data = []
    page = 1
    max_pages = 10000  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö 80,000+ –∑–∞–ø–∏—Å–µ–π (4000+ —Å—Ç—Ä–∞–Ω–∏—Ü)
    
    print("=" * 70)
    print("üöÄ –ù–ê–ß–ê–õ–û –ü–ê–†–°–ò–ù–ì–ê –ü–û–õ–ù–û–ì–û –õ–ò–î–ï–†–ë–û–†–î–ê REYA")
    print("=" * 70)
    print(f"‚è∞ –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üîó URL: {base_url}\n")
    
    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    print(f"üì° –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: –ó–∞–ø—Ä–æ—Å –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        response = requests.get(base_url, timeout=30)
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text[:500]}")
            return None
        
        data = response.json()
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç")
        print(f"   –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {list(data.keys())}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        if 'data' in data:
            records = data['data']
            data_key = 'data'
        elif 'leaderboard' in data:
            records = data['leaderboard']
            data_key = 'leaderboard'
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {list(data.keys())}")
            return None
        
        all_data.extend(records)
        
        if records:
            first_rank = records[0].get('rank', 'N/A')
            last_rank = records[-1].get('rank', 'N/A')
            first_points = records[0].get('totalPoints', 0)
            last_points = records[-1].get('totalPoints', 0)
            
            print(f"   üìä –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(records)}")
            print(f"   üî¢ –î–∏–∞–ø–∞–∑–æ–Ω ranks: {first_rank} ‚Üí {last_rank}")
            print(f"   üí∞ –î–∏–∞–ø–∞–∑–æ–Ω points: {first_points:.2f} ‚Üí {last_points:.2f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        meta = data.get('meta', {})
        print(f"   üîç –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {meta}")
        
        after = meta.get('after')
        has_more = meta.get('hasMore', False)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        while (after or has_more) and page < max_pages:
            page += 1
            print(f"\nüì° –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: –ó–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–π –ø–æ—Ä—Ü–∏–∏ (after={after})...")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            params_variants = [
                {'after': after},
                {'cursor': after},
                {'offset': len(all_data)},
                {'page': page},
            ]
            
            success = False
            
            for params in params_variants:
                if not params.get('after') and not params.get('cursor'):
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –±–µ–∑ after/cursor –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                    if after:
                        continue
                
                try:
                    response = requests.get(base_url, params=params, timeout=30)
                    
                    if response.status_code != 200:
                        continue
                    
                    data = response.json()
                    records = data.get(data_key, [])
                    
                    if not records:
                        print(f"   ‚ö†Ô∏è  –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {params}")
                        print(f"   ‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –¥–∞–Ω–Ω—ã—Ö - –≤—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ {len(all_data)} –∑–∞–ø–∏—Å–µ–π")
                        success = False
                        break
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –ª–∏ —ç—Ç–æ
                    first_new_rank = records[0].get('rank', 0)
                    last_existing_rank = all_data[-1].get('rank', 0) if all_data else 0
                    
                    if first_new_rank <= last_existing_rank:
                        print(f"   ‚ö†Ô∏è  –î—É–±–ª–∏–∫–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö (rank {first_new_rank} <= {last_existing_rank})")
                        continue
                    
                    # –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                    all_data.extend(records)
                    success = True
                    
                    first_rank = records[0].get('rank', 'N/A')
                    last_rank = records[-1].get('rank', 'N/A')
                    first_points = records[0].get('totalPoints', 0)
                    last_points = records[-1].get('totalPoints', 0)
                    
                    print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(records)} (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {params})")
                    print(f"   üî¢ –î–∏–∞–ø–∞–∑–æ–Ω ranks: {first_rank} ‚Üí {last_rank}")
                    print(f"   üí∞ –î–∏–∞–ø–∞–∑–æ–Ω points: {first_points:.2f} ‚Üí {last_points:.2f}")
                    print(f"   üìà –í—Å–µ–≥–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–æ: {len(all_data)} –∑–∞–ø–∏—Å–µ–π")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    meta = data.get('meta', {})
                    after = meta.get('after')
                    has_more = meta.get('hasMore', False)
                    
                    if meta:
                        print(f"   üîç –ù–æ–≤—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {meta}")
                    
                    break
                    
                except Exception as e:
                    print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {params}: {e}")
                    continue
            
            if not success:
                print(f"   ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω - –ø–æ–ª—É—á–µ–Ω—ã –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                break
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—É–º–µ–Ω—å—à–µ–Ω–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è)
            time.sleep(0.3)
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 —Å—Ç—Ä–∞–Ω–∏—Ü
            if page % 100 == 0:
                print(f"\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {page} —Å—Ç—Ä–∞–Ω–∏—Ü, {len(all_data):,} –∑–∞–ø–∏—Å–µ–π")
        
        if page >= max_pages:
            print(f"\n‚ö†Ô∏è  –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü ({max_pages}) - –≤–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å –µ—â–µ –¥–∞–Ω–Ω—ã–µ")
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return None
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    print("\n" + "=" * 70)
    print("üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–•")
    print("=" * 70)
    
    print(f"‚úÖ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(all_data)}")
    
    if not all_data:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        return None
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ rank
    print("üîÑ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ rank...")
    all_data.sort(key=lambda x: x.get('rank', 0))
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    ranks = [entry.get('rank') for entry in all_data]
    unique_ranks = len(set(ranks))
    
    if unique_ranks < len(ranks):
        print(f"‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã ranks: {len(ranks)} –∑–∞–ø–∏—Å–µ–π, {unique_ranks} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö")
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, –æ—Å—Ç–∞–≤–ª—è—è –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
        seen_ranks = set()
        unique_data = []
        for entry in all_data:
            rank = entry.get('rank')
            if rank not in seen_ranks:
                seen_ranks.add(rank)
                unique_data.append(entry)
        all_data = unique_data
        print(f"   ‚úÖ –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(all_data)} –∑–∞–ø–∏—Å–µ–π")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    ranks = [entry.get('rank', 0) for entry in all_data]
    points = [entry.get('totalPoints', 0) for entry in all_data]
    
    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   üî¢ Ranks: {min(ranks)} ‚Üí {max(ranks)}")
    print(f"   üí∞ Points: {min(points):.2f} ‚Üí {max(points):.2f}")
    print(f"   üìä –°—Ä–µ–¥–Ω–∏–µ points: {sum(points)/len(points):.2f}")
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º
    ranges = {
        '0-1': 0, '1-5': 0, '5-10': 0, '10-20': 0, '20-50': 0,
        '50-100': 0, '100-200': 0, '200-500': 0, '500-1000': 0,
        '1000-2000': 0, '2000-5000': 0, '5000+': 0
    }
    
    for p in points:
        if p < 1: ranges['0-1'] += 1
        elif p < 5: ranges['1-5'] += 1
        elif p < 10: ranges['5-10'] += 1
        elif p < 20: ranges['10-20'] += 1
        elif p < 50: ranges['20-50'] += 1
        elif p < 100: ranges['50-100'] += 1
        elif p < 200: ranges['100-200'] += 1
        elif p < 500: ranges['200-500'] += 1
        elif p < 1000: ranges['500-1000'] += 1
        elif p < 2000: ranges['1000-2000'] += 1
        elif p < 5000: ranges['2000-5000'] += 1
        else: ranges['5000+'] += 1
    
    print(f"\nüìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –î–ò–ê–ü–ê–ó–û–ù–ê–ú:")
    for range_name, count in ranges.items():
        if count > 0:
            pct = (count / len(all_data)) * 100
            print(f"   {range_name:12} : {count:5} ({pct:5.1f}%)")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
    final_data = {
        "timestamp": datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%SZ"),
        "source": base_url,
        "totalEntries": len(all_data),
        "minPoints": min(points),
        "maxPoints": max(points),
        "avgPoints": sum(points) / len(points),
        "leaderboard": all_data
    }
    
    return final_data


if __name__ == "__main__":
    leaderboard_data = fetch_complete_leaderboard_v2()
    
    if leaderboard_data:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON
        filename = "reya_complete_leaderboard.json"
        
        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ {filename}...")
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(leaderboard_data, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        print(f"\nüìÑ –§–∞–π–ª: {filename}")
        print(f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {leaderboard_data['totalEntries']:,}")
        print(f"üí∞ –î–∏–∞–ø–∞–∑–æ–Ω points: {leaderboard_data['minPoints']:.2f} - {leaderboard_data['maxPoints']:.2f}")
        print(f"üìà –°—Ä–µ–¥–Ω–∏–µ points: {leaderboard_data['avgPoints']:.2f}")
        
        # –¢–æ–ø-3 –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
        print(f"\nüèÜ –¢–û–ü-3:")
        for i in range(min(3, len(leaderboard_data['leaderboard']))):
            user = leaderboard_data['leaderboard'][i]
            print(f"   {i+1}. {user['walletAddress'][:10]}... - {user['totalPoints']:.2f} points")
        
        print(f"\nüìâ –ü–û–°–õ–ï–î–ù–ò–ï 3:")
        for i in range(max(0, len(leaderboard_data['leaderboard']) - 3), len(leaderboard_data['leaderboard'])):
            user = leaderboard_data['leaderboard'][i]
            print(f"   {user['rank']}. {user['walletAddress'][:10]}... - {user['totalPoints']:.2f} points")
        
        print("\n" + "=" * 70)
        print("‚úÖ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û")
        print("=" * 70)
    else:
        print("\n" + "=" * 70)
        print("‚ùå –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù –° –û–®–ò–ë–ö–û–ô")
        print("=" * 70)
